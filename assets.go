// Code generated by go-bindata.
// sources:
// frontend/application.coffee
// frontend/application.js
// frontend/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendApplicationCoffee = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x5d\x4f\xe3\x3a\x10\x7d\xf7\xaf\x98\xdb\x22\x39\x91\x4a\x28\x5c\xee\x7d\xa8\x94\x95\x76\xd9\xaf\x07\x40\x2b\xba\xab\x7d\x58\xa1\x95\x13\x4f\x1a\x43\x6a\x47\xb6\x43\x58\x41\xff\xfb\xca\x71\x92\x26\xa5\x20\xe8\x4b\xe3\xf9\xf2\x64\xce\x99\x13\x83\x69\xa5\xf1\x1b\x33\xa6\x56\x9a\x43\x0c\xb2\x2a\x0a\x42\x52\x8d\xcc\xe2\x12\x53\x8d\x16\x62\x08\x42\x38\x7c\x47\x00\x4c\x67\x38\x08\xe8\x34\x53\x7a\x7d\x36\x88\xa3\x61\x94\x09\xc9\x03\x6a\xf1\xde\x32\x8d\x8c\x86\xd1\x1d\x2b\x82\x90\x10\x00\x91\x35\x39\x78\x6f\xb5\xb3\x97\x5a\x95\x40\xd3\x1c\xd3\x5b\xe4\x94\x00\x34\xb5\xc7\x9d\x5c\x30\x9b\x47\x9a\x49\xae\xd6\x41\x18\x59\xb5\xb4\x5a\xc8\x55\xf0\xef\xff\x61\x64\xaa\xc4\xf8\xd3\x49\xd8\x25\xfb\xc6\xbe\x88\x24\x41\x2d\x4c\xfe\xfe\xd3\x32\x42\x99\x06\xde\x33\xdb\x29\xdf\xf4\x74\x10\xb1\x1b\x76\x0f\x94\x95\xe2\xc8\xbf\x30\x9d\x35\xd5\x38\xb3\x6c\xd1\x3c\x75\x95\x17\xed\x7f\xef\xfe\xfe\xa7\xc4\x05\x4c\x6e\x8c\x92\x13\xdf\x81\x65\xb6\x32\x67\x8a\x63\x97\x79\x32\x3f\xee\xd2\xfc\x98\x78\xeb\x38\x9d\xcf\x17\x60\xd4\x1a\x6d\x2e\xe4\xea\xa7\x56\x72\xd5\x7a\xfe\x7b\xd6\x73\x3a\x3f\x5d\xf4\x30\xf8\xdf\x14\x2e\x54\x7a\x0b\x99\xd2\x20\xa4\x45\x9d\xb1\x14\xc1\xa2\xb1\xa2\xcf\x82\xbd\xf7\x6f\xed\xbf\x05\x5f\x00\xcd\x94\x4a\x98\xa6\x6e\x24\x19\x2b\x0c\x12\xe2\xde\xf0\x52\xd9\xcf\xaa\x92\x7c\x00\xbf\x43\x50\x2a\x9b\x39\x33\x0d\x23\x93\xab\xda\xa1\x9b\x33\x93\x9f\x2b\x36\x8c\x74\x26\x88\xa1\x16\x92\xab\x3a\x2a\x54\xca\xac\x50\x32\x72\x66\x4f\x06\xf7\x14\x15\x28\x57\x36\x87\x38\x86\x79\xd3\x9a\x46\x5b\x69\xe9\xfa\x28\x99\xb6\x06\x62\x1f\x66\xca\x42\x58\xa0\x8f\xd4\xa7\x36\xbe\x41\xee\x49\x93\xdb\xde\xd8\x38\x7f\xcd\xaf\xf7\x53\xca\x7b\x8f\xaf\x1b\x46\xf2\xbe\x7e\xcf\xa6\xe3\x70\x4b\x8b\x89\xa3\xc5\x0a\xed\xd1\xf4\x41\xf0\xcd\x64\xf6\x16\xe8\x1b\xb4\x86\x43\xec\x29\xe1\xf0\xcd\x55\xfd\x91\x59\x46\x88\x90\xc2\x7e\x10\x92\x9b\x9d\x19\xef\xd9\xac\x44\x48\x0e\xd4\x54\xc9\x5a\x58\x3a\x83\xe1\x7e\x76\xc0\x60\xbd\x6c\xb9\x1e\x49\x76\x97\x30\x7d\x98\xb8\xed\xe9\x93\xd3\x42\xa4\xb7\x74\x06\x7d\x60\x93\xe8\x21\xea\x62\xdc\x3c\xd2\x9c\xc9\x15\xd2\x19\x74\xb8\x12\xd2\xa7\x0c\x1a\xdd\x82\xaa\x31\x83\x78\x7c\xf6\x98\x05\x74\x4a\x43\x0f\x46\x4b\xac\x11\x1d\x5d\x31\x37\xa4\x91\xb8\x7c\xf5\x38\x3a\x7b\xd4\x93\xd4\x03\xbf\x03\xe7\x3f\xad\x58\x6d\xe9\xdc\xe6\x4e\xa6\x0f\xdb\xf3\xe6\xb1\x39\x0d\x12\x37\x0e\xb5\x4a\x17\x3e\xf2\x85\xb6\x37\xd3\x51\xa1\x09\x69\x27\x5d\x32\x89\xc5\x65\x37\x12\x1a\x46\xb9\xe0\x18\x84\x43\xaf\x77\xfd\xb8\x3a\xdf\xae\xc9\x33\x5e\x2f\x99\x42\x96\x95\xf5\x7a\xe9\x5a\x7b\x5d\x70\xa6\xd2\xca\xbc\xb6\xb2\xc1\x02\x53\xeb\xc5\xf8\x19\xd1\xef\x88\xb9\x17\x17\x88\x61\x08\xca\x2b\x11\xd9\x55\x64\x8e\x2f\x2b\xf2\xdb\xa7\x3b\xf2\x0e\xc4\x69\x64\xef\x25\xb5\x76\x92\xba\xb7\xe6\x15\x32\xde\x5f\xf9\x14\xb2\x91\x7b\xdf\x67\xae\xfb\x40\x90\xb1\x7c\xef\x6c\xf6\x93\x46\x3a\x0d\x25\x07\x3e\xa8\x97\x84\xe6\xfa\x6e\x03\x83\x90\xfc\x0d\x00\x00\xff\xff\xad\x1c\xf5\x0e\xa9\x07\x00\x00")

func frontendApplicationCoffeeBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationCoffee,
		"frontend/application.coffee",
	)
}

func frontendApplicationCoffee() (*asset, error) {
	bytes, err := frontendApplicationCoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.coffee", size: 1961, mode: os.FileMode(436), modTime: time.Unix(1501782528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendApplicationJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\xbd\x0b\x90\x42\x54\xae\xbd\xdd\xf6\x60\x43\x87\x76\xdb\x26\x87\x34\x28\xb2\x2d\x7a\x28\x82\x82\x12\x29\x8b\x89\x4c\x0a\x24\xb5\xde\x20\xf1\x7f\x2f\x28\x52\x12\x25\xdb\xf9\xda\xc3\x0a\xe4\x0c\xdf\x0c\x67\x1e\xdf\xf8\xe6\x06\x9e\x73\xc9\x35\xb5\x9c\x41\xfe\x1e\xee\x55\x59\x72\xfe\x50\x68\xd1\x58\x58\x93\xf5\x2d\xb9\x5b\xe0\xb2\x95\x85\x15\x4a\xe2\x04\x3e\x2c\x00\x1e\xa9\x86\x42\x73\x6a\xf9\x03\x2f\x34\xb7\x29\x30\x6a\xe9\x2b\x65\x7f\x57\xad\x64\x29\x54\xd4\x54\x2f\x15\x65\x29\x08\x29\xec\x2f\x42\x32\x93\x82\xe4\x87\xde\xdb\x74\xdf\xfb\x0e\x81\x75\xcb\x56\xf3\x3f\xa9\x31\x07\xa5\xdd\xba\x52\x87\x5f\xa9\xa5\x29\x18\xb5\xe7\xb6\x12\x72\xf7\x8f\x56\x72\xb7\x5d\x2c\x60\xe6\x0c\x19\xc8\xb6\xae\x3b\x4b\x9c\x11\x64\x30\xcb\xd9\x67\xed\x23\x6f\xbb\xb5\xe9\x3d\xaf\x31\xba\x2a\x95\xde\xdf\x47\x00\x28\x21\xa5\x90\x0c\x23\xcb\x9f\x2c\xd5\x9c\xa2\x84\x3c\xd2\x1a\x27\xfe\xac\x28\x01\xbb\x63\xfc\xc9\x6a\x67\x6a\xb4\x6a\x30\x2a\x2a\x5e\xbc\xe3\x0c\x25\x7d\xc8\x33\xe9\xfe\x41\x6d\x45\x34\x95\x4c\xed\x71\x42\xac\x7a\xb0\x5a\xc8\x1d\xfe\xe1\xa7\x84\x98\x36\x37\x7e\x75\x1b\xc2\x44\x49\x3e\x17\x79\xce\xb5\x30\xd5\xcf\xbf\x3d\x10\x2e\x0b\x6c\xc6\x62\x46\x11\xc2\xc1\x63\xf7\xff\x9a\xd0\xb7\xf4\x09\x23\xda\x88\x1b\x5f\x1d\x94\x0e\x99\xb9\x96\x6d\x86\x55\x1f\x69\x13\xbe\x61\xfb\x98\x46\xde\x7f\xbd\x6f\xf8\x06\x96\x6f\x8d\x92\xcb\x7e\xdf\x58\x6a\x5b\x73\xaf\x18\x8f\xb1\x6e\x57\xeb\xcd\xac\xcb\x83\xed\x6e\xb5\xda\xcc\x1a\x3b\x1a\x7f\xfc\x94\xf1\x6e\x75\xb7\x39\x6d\xab\xff\xd3\xdc\xb6\x5a\x4e\x63\xe2\xd8\xa1\xbf\xe0\x7f\x82\x6d\x00\x95\x4a\xe5\x54\xa3\xc8\x7e\x1c\x4a\xde\x57\xaf\xff\xf6\x96\x10\xa2\xa4\xb5\xe1\x6e\xe7\xd8\xb1\x2e\x66\xfe\x39\xd6\x85\x53\x8e\x2c\x52\xd9\xd2\xb9\xa1\x84\x38\x8a\x7b\x2e\x79\x94\xfe\xc5\x5c\xe2\xad\xb3\xa7\x20\x58\x0a\x0d\xd5\xd6\xf8\x84\xdc\x26\x64\x70\x10\x92\xa9\x03\xa9\x55\x41\xdd\x39\xe2\xb6\x47\x96\xba\x15\xa9\xb9\xdc\xd9\x0a\xb2\x2c\x83\xd5\x58\x37\x9f\x5a\x4c\x98\x0e\x1c\xb2\x0e\x99\x98\xa6\x16\x16\xa3\x8f\x28\xe2\x7c\xe7\x10\xc3\xdd\x8e\x70\x21\x9d\xce\xe5\xdf\xd5\x9b\xed\xa5\x17\xe0\x1d\xd6\x6f\xe2\xc0\x82\x0d\x51\x87\x47\xb0\x9e\xd6\x3d\x90\x79\xe9\xc8\xbc\xe3\xf6\x66\x09\xcf\xba\x82\x7c\xf8\x26\x86\x76\x5c\x9a\xa8\x56\x44\x5e\xc7\xc1\xa0\x41\x67\x98\xe0\x3b\x36\x28\xdb\xb9\x96\x5d\x50\x94\xbc\x53\x14\xd3\xe6\x7b\x61\x51\x3a\x11\xac\x70\xd7\x8e\x26\xa3\x50\x12\x49\x1f\x73\xaa\xbf\xcf\x9d\x60\x0c\x00\x45\x2d\x8a\x77\x28\x52\xd4\x59\xa1\xb0\x67\x44\xef\xee\xca\x5a\x54\x54\xee\xdc\xeb\xef\x89\x16\xdd\x64\x80\x39\x77\x93\x91\x55\x9a\x97\x90\x4d\xd7\x3d\x45\xae\x50\x32\x34\xfc\xfc\x2b\x99\xbc\xcb\x38\x8e\x6b\xc1\xa9\x40\xbf\xe8\xe8\xde\xea\x3a\x56\xea\x17\x9e\x5f\xee\x04\x19\xde\xf2\x48\xcd\x19\xcf\xbe\xcb\xfc\x68\x98\x48\xf1\x88\x12\x2d\x9e\xc1\xf2\xa3\x23\xd3\x14\x20\x66\x67\xab\x6b\xc8\x00\x7f\xe2\xee\x89\x43\xb9\x0a\x28\x01\x78\xec\x68\x43\x25\xaf\x5f\xf5\x65\x46\x09\xa9\x04\xe3\x38\x99\x39\x78\xeb\xdf\xaf\x5f\x4e\xf4\xe1\x82\x83\x1f\x4e\x42\x36\xad\x0d\x93\xa9\xd5\xf5\x97\x1f\x28\x55\xd1\x9a\xaf\x08\x60\x78\xcd\x0b\x8b\xa7\x44\xbb\x30\x8a\x87\x9e\x87\x27\xf4\xf9\x76\xcf\xe6\x71\xd4\xe1\xaf\x6e\xef\x7c\x52\x32\xfe\x65\x93\xf2\x9b\xba\x34\x77\x88\x04\x7e\x6e\x1a\x66\xda\xc1\xcd\xb4\x4b\xe0\xaf\x39\x65\x43\xf8\x98\x03\xd1\x14\x39\x75\x3c\xfb\x43\xc5\x8c\xca\x10\xda\x31\x99\xaa\x9f\x19\x55\x27\xe9\xce\x07\xd6\xf5\xfc\x37\x61\xa4\x88\xb3\xa4\x7b\xc9\x09\xc7\x93\xed\x62\x71\x4c\x48\x41\xeb\x1a\xdb\x4a\x98\x64\xbb\xf8\x3f\x00\x00\xff\xff\x6d\x79\x07\x06\x84\x0a\x00\x00")

func frontendApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationJs,
		"frontend/application.js",
	)
}

func frontendApplicationJs() (*asset, error) {
	bytes, err := frontendApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.js", size: 2692, mode: os.FileMode(436), modTime: time.Unix(1501783280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6b\x53\xdc\xb8\x12\xfd\x4c\x7e\x45\xe3\x54\xdd\xec\x66\xb1\xcd\x30\x01\x12\xe2\x99\x2a\x5e\x4b\x20\x3c\xc2\x23\x90\x61\x6b\x3f\xc8\x56\xdb\xd6\x20\x4b\x46\x92\x67\x98\xdc\xba\xff\xfd\x96\xfc\x18\xe6\x45\xc2\x26\xd9\x54\x85\x19\x6b\x5a\xdd\x3a\xa7\x4f\xb7\x64\x05\xcb\x7b\x67\xbb\x57\xbd\x4f\xfb\x90\x9a\x8c\x77\x5f\x04\xf6\x03\x38\x11\x49\xc7\x41\xe1\x74\x5f\x00\x04\x29\x12\x6a\xbf\x00\x04\x19\x1a\x02\x51\x4a\x94\x46\xd3\x71\x0a\x13\xbb\x6f\x9d\xc9\x9f\x52\x63\x72\x17\xef\x0b\x36\xe8\x38\x5f\xdc\xcf\xdb\xee\xae\xcc\x72\x62\x58\xc8\xd1\x81\x48\x0a\x83\xc2\x74\x9c\xc3\xfd\x0e\xd2\x04\xa7\x66\x0a\x92\x61\xc7\x19\x30\x1c\xe6\x52\x99\x09\xe3\x21\xa3\x26\xed\x50\x1c\xb0\x08\xdd\xf2\x61\x05\x98\x60\x86\x11\xee\xea\x88\x70\xec\xb4\x1a\x47\xcb\xae\x0b\x57\x29\x02\x09\xe5\x00\xa1\x0d\xa5\x63\x43\x12\x0d\xaf\xb3\x42\x9b\xd7\x10\xc9\x0c\x21\x66\x4a\x1b\x60\x02\x4c\x8a\x60\xb1\xbd\x07\x22\x46\x20\x4d\x8a\xaa\x7c\x6e\x62\x83\x9d\x54\xcd\x79\x4d\x62\x83\xea\xb5\x9d\xa2\xb1\x72\xe9\xba\x75\x54\xc3\x0c\xc7\xee\xd9\xd5\x25\xb8\x70\x26\x10\xae\x58\x86\x70\x89\x91\x42\xa3\x03\xbf\xfa\xf5\xc5\xe3\x02\x77\xa4\x34\xda\x28\x92\x97\x1e\x96\x96\x02\xce\xc4\x1d\x28\xe4\x1d\x47\x9b\x11\x47\x9d\x22\x1a\x07\x52\x85\x71\xc7\xb1\x7c\xea\x2d\xdf\x8f\xa8\xe8\x6b\x2f\xe2\xb2\xa0\x31\x27\x0a\xbd\x48\x66\x3e\xe9\x93\x07\x9f\xb3\x50\xfb\xa1\xf5\x39\x24\x26\x4a\xfd\xb6\xd7\xf6\x36\xfd\x98\x13\xc3\x47\xd5\xb8\x8d\xe5\x65\x4c\x78\x91\xd6\x4e\xb9\x8e\xea\x1f\x13\x06\x13\xc5\xcc\xa8\xe3\xe8\x94\xac\xad\x6f\xb8\xaa\x75\xc3\xfa\x37\xfe\xe5\xe9\x49\x72\x36\xbc\x5b\x3f\xde\xbb\xdb\x3c\xbf\xf8\xa0\x36\xe4\x75\xaf\x17\xf6\x6e\x4e\x86\x7e\xeb\xee\xec\x4b\xdc\x3b\x8a\x93\x8e\x03\x91\x92\x5a\x4b\xc5\x12\x26\x3a\x0e\x11\x52\x8c\x32\x59\x68\x07\xfc\x9a\x97\x5f\x80\x2b\x96\xc2\xb8\x64\x88\x5a\x66\xe8\xbf\xf1\x36\xbd\x55\x3f\xd2\xd3\xc3\xcf\x43\x86\xb7\x4a\x1d\x45\xc3\xbd\xc8\x6f\x17\x7b\xa9\xa6\x66\xa3\xa5\x8f\xd7\xe4\xd9\x4e\xaf\xbd\xb1\x76\x7f\xd2\xe6\x52\xb4\x92\xd1\xfe\xc3\xdd\xf1\xea\xb7\x91\x3d\xe6\xf1\xc3\xd5\xc9\xf1\x3a\xe8\x94\x65\x40\x04\x85\x0b\xd4\xb9\x14\xd4\xeb\x6b\x88\xa5\x82\xc3\xfd\xb7\xa0\x8b\xdc\x6a\x19\x64\x5c\x1b\x23\xc7\x0c\x85\xd1\xe5\x84\x0c\x29\x23\x70\x5f\xa0\x62\x38\xa1\x26\xeb\xfa\x66\xfb\xe2\xf4\xf0\xf4\x60\x6b\xd2\x29\x95\xa8\xc5\x2b\x03\x43\xa9\xee\x80\xc5\x30\x92\x05\xd8\x6a\x29\x55\x9c\x93\x04\x61\xc0\x08\xc4\x8c\xe3\x96\xef\x4f\xb9\xfb\x8b\xc5\xc0\x0d\x1c\xee\xc3\xbb\xbf\xbb\x35\x4b\x81\x8e\x14\xcb\x0d\x68\x15\x3d\x3b\x19\xb6\x33\xac\xeb\x94\x0d\xfc\xb6\xb7\xe9\xb5\x1f\x9f\xcb\x14\xf4\xa7\x32\xb0\x38\x0b\xed\xa3\x91\x7f\x10\x5e\x1e\xab\x64\x55\xbe\x1b\xad\xdf\xae\x8b\x56\x31\x5c\xbd\x7f\xb8\xdd\xdf\xfd\xb0\xb9\xbb\x71\x76\x9e\x5f\xef\x24\xa7\x7f\xf6\xc8\xea\x37\xf4\xd5\x0d\xfc\x6a\xf1\x3f\x83\x45\x8d\x89\xf5\x5b\xde\x1b\x6f\x6d\x3c\xf0\x5c\x28\xc9\x06\xdb\x8e\x07\xb7\xf9\x1f\x62\xef\x7c\xed\x8a\x5e\x5d\xf8\xd7\xd7\x1f\x8f\xe2\x76\x78\xa0\xe4\x9b\x22\x5c\x8f\x07\x37\x97\x37\xd7\x17\x6c\xed\x74\xff\xd9\x50\x82\xe5\xbf\x50\x50\x16\xff\x6d\xb3\x57\x8d\x94\x95\xd3\x00\x7d\x69\xf5\x6e\x52\x26\x92\xa1\x92\x22\x59\x81\x97\x42\x9a\x58\x16\x82\xae\xc0\xcb\x9c\x08\xe4\x17\x48\x68\xd5\x79\x9a\x91\xea\xe9\xf3\xc5\x31\xfc\x77\x8c\x89\x32\x9d\x73\x32\xda\x02\x21\x05\xbe\xaf\x87\xff\x57\x05\xf4\xc7\x11\x03\xbf\xe9\xfb\x41\x28\xe9\xa8\x6c\x55\x82\x0c\x20\xe2\x44\xeb\x8e\x23\xc8\x20\x24\x0a\xaa\x0f\x97\x62\x4c\x0a\x6e\x1c\x6b\xb5\x14\x50\x36\x36\xb3\xad\x94\x30\x81\xca\x8d\x79\xc1\x68\x65\xb0\x54\x35\x42\x65\xcb\xc0\xfe\x37\x32\x49\x38\x42\x82\x06\x12\x25\x8b\x1c\x69\x59\x43\x21\x1a\x83\x0a\x32\x19\x32\x8e\xcd\xaa\xeb\xae\x39\x1d\xa5\x5e\x85\x5d\x30\xaa\x3a\xc6\x52\x10\x16\xc6\x48\x01\x66\x94\x63\xc7\xa9\x1e\x9c\x99\x19\x75\xe4\x48\x72\x4e\x72\x8d\xd4\x01\x4a\x0c\xa9\x87\xed\xea\xab\xf1\x66\x98\xa8\xc4\xee\x7b\x2f\x43\xed\xe2\x03\xc9\x72\x8e\x6e\xed\xa8\xb1\x74\x5b\x0e\x10\xc5\x88\x8b\x0f\x39\x11\x14\x69\xc7\x89\x09\xd7\xd8\x2c\x6a\x29\xd0\x39\x11\xcd\x2a\xb4\x72\xa5\xe0\x23\xa7\x7b\x55\xad\x43\x90\x01\x4b\x88\x61\x52\x04\xbe\xb5\x5b\x38\x89\x45\x52\xb8\x21\x51\xa5\x7c\xfe\x0d\xa3\xc0\xaf\xc8\x6a\x1e\xc9\x0c\x69\xa1\x4d\x5c\xd3\xc9\x5f\x3a\x4f\x6e\x7d\xa4\x4e\x94\x4f\xd9\xa0\xfb\xe2\x31\xf1\xbb\x92\x73\x8c\x4c\xd9\xb9\xac\xa2\xec\x46\xa1\x57\x6c\xca\x33\xbd\x52\x0a\xa2\xda\x8b\x9b\x6d\xd8\x6a\xa1\xcc\x08\x13\xc9\xc2\xf4\x37\xe4\xc3\x4c\x32\x1c\x60\xb4\xe3\x7c\x33\x59\x0d\xc6\x82\x4f\x80\x6c\xfc\x4c\x7c\x55\x2c\x49\xcd\x63\x12\x39\xeb\x06\x64\xcc\x40\x19\x46\xe0\xb0\x42\xee\x74\x03\xd6\x38\x8b\x09\xc4\xc4\xcd\x79\x55\xec\xac\x0b\xa7\x38\xac\x09\xb2\xfc\x04\x3e\x67\x63\xd2\x0b\x3e\xc9\x57\xc9\x94\xef\xcd\xac\xb8\x81\x3f\x65\x33\x53\x63\xcd\xb9\xc2\x17\x64\xd0\x85\xba\x91\x2c\x2a\x49\x67\xdc\x41\x27\x7e\x55\x72\x38\x1e\x9f\x9d\xc7\xdd\x8c\xba\x6f\xa1\xfe\x92\x17\x3a\x75\xd7\x26\x8c\xa7\xcd\x09\x47\x65\xa0\xfc\xeb\x52\x22\x12\x54\x0e\x28\x69\xab\xaa\x1c\xab\x49\xab\x1b\xd8\x94\x17\x80\x59\x02\xef\x0b\xd4\xb6\x2a\xdc\x88\xa9\xc8\x1e\x25\xcb\x12\x4b\x19\xa5\x28\x3a\x8e\x51\x05\x56\xf4\x4e\x39\xb9\x4a\x99\x06\xa6\x41\xc8\x4a\x6a\xba\xa4\xbd\xdc\x38\x89\x42\xe0\x52\xde\x59\x41\xc5\x52\xfd\x27\x45\xce\x59\xfe\x7e\x12\x49\x25\xda\x9f\x80\x36\xdd\xac\xff\x0d\x80\x97\x4d\x04\x18\xda\x32\x29\xe3\x78\x70\xf8\x2a\x83\x01\xaa\x11\x68\xa9\xd4\xc8\x9e\x85\x0b\x8b\x9f\xe9\xef\xa3\x9c\x7a\x6c\xca\xf6\x07\x24\xd2\xb2\xaa\x78\x82\xbb\x72\x57\x82\xf2\xaf\x9b\x2b\x96\x11\x35\xaa\xf8\x2a\x87\x4e\x1f\x8b\x68\x9a\xaf\x59\x0f\x65\xaf\x67\x73\xbc\xda\xb7\x95\xf6\xb4\x61\x79\x00\x77\xba\xbb\x0a\x89\x41\x20\x20\x70\x58\x4b\x21\xf0\xd3\xf6\x4c\x98\xd9\xac\x2f\x8a\x6c\x77\xc3\xf9\xb0\xb6\x7b\x95\x38\xec\x97\x2a\xd8\x42\x24\xb3\x3e\xad\xb9\x5b\xee\x7a\x0b\x0c\xed\x29\x9a\x84\xc8\xad\x48\x3b\x8e\xae\xfd\x55\x7e\xcb\x2d\x69\x2b\xf0\x4b\x83\x85\x53\x0d\x3e\x18\xa2\x90\x4c\x85\xb2\xd5\xaf\x24\xb7\x82\x1d\xea\x8e\xb3\x5e\x8b\xb5\xe9\x5c\x7e\x33\x69\xc1\xaa\xe7\xc9\xf9\xa7\x60\x98\xc8\xad\x18\xcb\x0d\x39\x4a\x31\xba\x0b\xe5\x83\x53\xbf\xfa\xe1\x83\x51\xc4\xd5\x18\x15\xaa\x6e\xdc\xe5\x88\x03\xa5\x21\xd2\xef\xb1\x53\x59\x77\x4f\xc8\x1d\x02\x33\x50\x3e\x42\xe5\x0e\x7e\x43\x11\xa9\x51\x6e\xec\x0f\x21\xc6\x52\xd9\x6e\x20\xac\x7e\xc0\xc8\xba\x39\xa8\x01\xaa\xdf\x9f\xa4\xf3\x29\xf0\x15\xa2\x1a\x7e\x68\x04\x84\x46\xb8\xba\x88\x22\xd4\xda\xa9\x91\xea\x22\xcc\x98\x71\x60\x40\x78\x81\x1d\xa7\x56\xe2\x63\x4b\x5a\x9e\x57\x93\x6f\x99\xfc\x8e\x36\xa7\x0b\x74\x36\x15\x93\x75\x36\x5e\xcf\xb8\xce\xc6\xc7\xc2\x5f\x5e\x67\xb5\x38\xa3\x12\x24\x5d\xfe\xa5\x35\x96\xcf\x27\xa0\x27\x0b\xd5\x74\xf6\x21\xd1\x4d\xdc\xf2\x14\xa1\x8d\x54\x48\xa1\xd0\x65\x9e\xed\x6e\xf0\xf9\xe2\x78\x6b\x8e\xea\x39\xaf\xcf\x56\xf4\x94\x9e\x6d\xe1\x38\x4f\x94\x1a\x12\x6a\xcf\x79\xf3\x69\x5e\x20\xaa\x45\x28\x3f\x71\x24\x1a\x41\x61\x86\x59\x88\xaa\xda\xd2\x24\x24\xb2\x92\x6f\x85\xcc\xee\x6c\x4a\x23\x8f\x81\x68\x30\x29\xb1\xef\x8a\x05\xa7\x40\x51\x1b\x25\x47\x13\x82\xf3\xe0\xa8\xd0\x06\x72\xa2\xb5\xad\x08\x23\xc1\x6e\x56\x52\x20\x20\xd7\xb8\xfc\x3d\x86\x7e\x42\x89\xf3\x1d\xff\xf1\x95\xe5\x97\x4b\xf1\xa2\xb2\x2f\x79\x69\x90\x7b\xde\x2f\x55\xe4\xb3\x95\xf2\xcc\x5e\x3c\x56\xca\xd3\x8d\x78\x9e\x6c\x78\x42\x35\x81\xcd\xbb\x48\xba\xdb\xc6\x1e\xa3\x99\x14\x5b\xf6\xf5\xae\x1c\xb2\x75\xf3\x4a\x21\xd8\x58\xa0\x11\xc7\x15\x22\x45\x84\x1e\x6c\x6b\xd0\x52\x0a\x2b\x24\x7b\x5c\x52\xc8\x25\xa1\x8f\x37\x0d\x13\xa7\xa9\x21\xe3\x1c\x42\x84\xc4\xaa\x47\x4b\xc8\xc8\x28\xb4\xef\x53\xf9\xc8\x2a\x4b\xc8\xe1\x82\x53\x07\xfc\x90\xa8\x16\x1d\x4e\x66\xed\xca\x03\x71\xff\xbc\xb0\xc7\x9f\xdf\x04\xda\xa6\x47\xd4\xa8\x7c\x81\x18\x5f\xbb\xbd\xd2\x70\x44\x06\xe4\xb2\xba\x34\xc8\x79\x91\x30\xa1\x7f\x7f\xbc\x31\xf9\x81\xdb\x84\xfe\xbd\x8d\xe8\xb7\xbc\xd6\x9a\xf7\xa6\x7e\x5a\x78\x93\x30\x7f\x8f\x70\x2b\xf5\x7e\x78\x71\x1c\x9e\x9e\x7f\x3d\xce\xc5\xc7\xc3\xbb\x7d\xaa\x3e\x0d\x36\xf9\xd9\xe8\xdd\xee\xda\x66\xfa\xe1\xfc\x8f\x2f\xf9\x5b\xf2\xe6\xe4\x61\xfb\xfc\x1f\xdc\x23\xb8\x2e\x1c\x8a\x88\x17\x14\x81\x70\x0e\x91\xcc\x72\xc6\x91\x36\x68\xe1\xb7\x10\xb9\x1c\xfe\xbe\x02\x52\x01\xab\x0d\x99\xa0\x6c\xc0\x68\x41\x78\x79\x8b\xa4\x6d\xf2\x05\x22\x45\xfa\x53\xdc\x98\x21\xb3\x6f\xf1\xee\xf8\x2a\xb2\xbe\xa1\xec\xeb\x99\xdb\xc9\xef\x73\xf5\x79\xfd\x76\x1f\x3f\xc6\x07\xa7\x67\x7d\xb2\xba\xba\x79\x72\xb2\xd7\xee\xed\x1c\xae\x6e\xb7\xcf\x2e\x6f\xcf\xce\x43\x3c\xd8\xf8\xba\x16\xaf\xf5\x56\xd3\xe2\xed\xf3\xb9\xfa\x01\x48\x09\x0b\x43\x54\x4c\xa7\x2e\x41\xed\xb7\xbc\x55\x6f\x75\x7a\xec\x99\x78\x3e\xbc\xdb\xf1\xbf\x5c\xec\xb1\xfe\x29\xfb\xb3\x4d\x92\xeb\xbe\x61\x5f\x5b\x87\xc7\xd7\xac\x1d\xe9\x7d\x7a\xf0\xf5\x5d\x6f\x27\x59\xbf\xea\xdf\xc8\xe2\xe4\x59\x78\xe6\x01\x91\x3c\xe7\x2c\x2a\x2f\x14\xec\x7a\xa6\xb0\x07\x7e\x75\xad\x13\xf8\xd5\xcd\xff\x8b\xff\x07\x00\x00\xff\xff\x97\x99\x46\xb3\x0b\x18\x00\x00")

func frontendIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHtml,
		"frontend/index.html",
	)
}

func frontendIndexHtml() (*asset, error) {
	bytes, err := frontendIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 6155, mode: os.FileMode(436), modTime: time.Unix(1501773470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/application.coffee": frontendApplicationCoffee,
	"frontend/application.js": frontendApplicationJs,
	"frontend/index.html": frontendIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": &bintree{nil, map[string]*bintree{
		"application.coffee": &bintree{frontendApplicationCoffee, map[string]*bintree{}},
		"application.js": &bintree{frontendApplicationJs, map[string]*bintree{}},
		"index.html": &bintree{frontendIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

