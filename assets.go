// Code generated by go-bindata.
// sources:
// frontend/application.coffee
// frontend/application.js
// frontend/index.html
// frontend/locale/de-de.all.json
// frontend/locale/de-de.untranslated.json
// frontend/locale/en-us.all.json
// frontend/locale/en-us.untranslated.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendApplicationCoffee = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5f\x4f\xe3\x38\x10\x7f\xf7\xa7\x98\x6b\x91\x9c\x48\x25\x14\x8e\xbb\x87\x4a\x39\xe9\x96\xfd\x2b\x01\x42\xb0\x68\x1f\x56\x68\xe5\xc4\x93\xc6\x90\xda\x5d\xdb\xa1\xac\xa0\xdf\x7d\xe5\x38\x49\x93\x50\x2a\x78\xdb\xbe\xb4\x9e\xdf\xfc\xb1\x67\x7e\x33\x53\x83\x69\xa9\xf1\x82\x19\xb3\x52\x9a\x43\x0c\xb2\x2c\x0a\x42\x52\x8d\xcc\xe2\x15\xa6\x1a\x2d\xc4\x10\x84\xb0\xff\x1f\x01\x30\x8d\x60\x2f\xa0\xe3\x4c\xe9\xc5\x49\x47\x8f\x86\x51\x26\x24\x0f\xa8\xc5\x07\xcb\x34\x32\x1a\x46\xf7\xac\x08\x42\xe2\x2d\xfb\x71\xce\x98\xcd\x23\xcd\x24\x57\x8b\x20\x8c\xac\xba\xb2\x5a\xc8\x79\xf0\xf7\xbf\x61\x64\xca\xc4\xf8\xd3\x51\xd8\x0d\xfa\x49\x24\x09\x6a\x61\xf2\xff\x3f\x5c\x45\x28\xd3\xc0\x23\x93\x81\xf3\x2a\xde\x5e\xc4\x6e\xd9\x03\x50\xb6\x14\x07\xfe\x31\x74\x42\x00\x00\x38\xb3\x6c\x56\xfd\x6a\x3c\xcf\xea\xef\x16\xfe\xfa\x6b\x89\x33\x18\xdd\x1a\x25\x47\x95\xd0\x58\x66\x4b\x73\xa2\x38\x36\x96\x47\xd3\xc3\xc6\xcc\xa7\x80\xd7\xc0\xf1\x74\x3a\x03\xa3\x16\x68\x73\x21\xe7\xdf\xb4\x92\xf3\x1a\xf9\xe7\x45\xe4\x78\x7a\x3c\x6b\x53\xec\x3f\x63\x38\x53\xe9\x1d\x64\x4a\x83\x90\x16\x75\xc6\x52\x04\x8b\xc6\x8a\xd6\x0a\xb6\xc6\xdf\xc8\x7f\x08\x3e\x03\x9a\x29\x95\x30\x4d\x5d\x4a\x32\x56\x18\x24\xc4\xbd\xf0\x5c\xd9\x8f\xaa\x94\xbc\x53\x5a\x57\x51\xa9\x6c\xe6\xc4\x34\x8c\x4c\xae\x56\xae\x72\x39\x33\xf9\xa9\x62\x5d\x4d\x27\x82\x18\x56\x42\x72\xb5\x8a\x0a\x95\x32\x2b\x94\x8c\x9c\x98\x00\x88\xac\x52\x88\x0a\x94\x73\x9b\x43\x1c\xc3\xb4\xba\x9a\x46\x5b\x6a\x49\xea\x48\x4b\x26\xb1\x38\xc7\x55\xcb\x9c\x5c\x70\x0c\xc2\x2e\xea\xa1\xeb\xcb\xd3\x21\xda\xb9\x65\x4f\xde\xe6\x76\xe5\x72\xbb\xd5\xe7\x25\x32\xee\xfd\x5e\x68\xec\xbc\x52\xe3\xcf\x12\x8d\x7d\xc6\xf7\xdd\x4f\xad\x51\x8e\xa9\xe2\x78\x7d\xf9\xe5\x44\x2d\x96\x4a\xa2\xb4\x81\x43\x2a\x1a\x2e\x99\xb6\x06\x62\x9f\x12\xb3\x2c\x84\x05\xfa\x44\x7d\x9a\x2a\xac\x93\xa7\xa3\x2a\x4f\xb5\xd3\x0a\xfc\x3e\xbd\x21\x75\x41\xfb\xcd\xe3\xd1\xc3\x1b\x17\x42\xf0\xd6\x7f\xdb\x37\x87\xe1\xa6\x05\x46\xae\x05\xe6\x68\x0f\xc6\x8f\x82\xaf\x47\x93\xb7\xd0\xbc\x62\x66\x97\x30\x2d\xfd\x1d\x97\x73\xb5\x7a\xcf\x2c\x23\x44\x48\x61\xdf\x09\xc9\xcd\x80\x4f\x5b\x26\x44\x22\x24\x07\x6a\xca\x64\x21\x2c\x9d\x40\x77\xce\x34\xe5\x6d\x58\x31\x81\x48\xb2\xfb\x84\xe9\xfd\xc4\xcd\x89\xd6\x38\x2d\x44\x7a\x47\x27\xd0\x2a\x56\x86\xbe\x46\x8d\x8e\xcb\x47\x9a\x33\x39\x47\x3a\x81\x86\xc3\x75\x00\x8d\xf7\xc8\x8a\xc1\x8d\x1a\xa7\x3d\x26\x10\xd2\xc6\xe8\xbc\x6c\x43\x03\x8d\x19\xc4\xfd\xb3\x2f\x72\x40\xc7\x34\xf4\xd5\xab\xbb\xae\xd7\xab\xce\x99\xcb\x6a\x6f\xaa\x7e\xae\xd9\xc4\x2c\x8b\xda\x0e\xf6\x4c\x19\xd4\xff\xaf\x7a\x4a\x6f\x7a\xbd\xb6\x1d\x8d\x1f\x37\xe7\xf5\x53\x75\xea\x18\xae\x5d\x99\x4b\x5d\x78\xcd\x1d\xd7\x5e\x8f\x7b\x8e\x46\x6f\xe8\xda\x61\x87\xed\xee\xeb\xba\xff\x5e\x40\xfd\x36\x11\x72\x59\x5a\xbf\x4a\xdc\xe5\x5f\xa7\x9c\xa9\xb4\x34\xaf\xf5\x6c\xb0\xc0\xd4\xbe\xb0\xa7\xfc\x3e\x6c\xb8\xbe\xb5\x72\x10\x43\xb7\x6c\xaf\xac\xd9\x70\xa1\x71\xdc\xbd\xd0\xfe\x9c\xa9\xb9\x4b\x63\x6b\x51\x7b\xf0\xb6\xff\x08\xcd\x06\x26\xfd\xfd\x38\x18\x27\xcf\xae\xda\x8c\x6f\xb2\xe7\x95\xda\x39\x54\x85\x6f\xda\x3e\x08\xc9\xef\x00\x00\x00\xff\xff\x0e\x77\xbf\xdd\xe6\x08\x00\x00")

func frontendApplicationCoffeeBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationCoffee,
		"frontend/application.coffee",
	)
}

func frontendApplicationCoffee() (*asset, error) {
	bytes, err := frontendApplicationCoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.coffee", size: 2278, mode: os.FileMode(436), modTime: time.Unix(1503150273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendApplicationJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\xb6\x13\x7f\xf7\x5f\xc1\xaf\x13\x40\x12\xaa\x2f\x63\x67\xd9\x1e\x6c\xe8\x61\xf3\xb6\x76\x40\x57\x14\xc9\x8a\x3d\x0c\xc5\x40\x89\x27\x8b\x9d\x4c\x7a\x24\x15\xb7\x68\xf3\xbf\x0f\xfc\x21\x89\xa2\xed\xa4\xd9\xd3\xf2\xe2\x50\xfc\xf0\x8e\x77\xf7\xb9\xcf\xf1\xea\x0a\xbd\x04\x0e\x92\x68\xa0\xa8\xfc\x84\x36\xa2\xae\x01\xee\x2a\xc9\xf6\x1a\x2d\xf1\xf2\x1a\xdf\xcc\xd2\xba\xe3\x95\x66\x82\xa7\x19\xfa\x3c\x43\xe8\x9e\x48\x54\x49\x20\x1a\xee\xa0\x92\xa0\x73\x44\x89\x26\x6f\x84\xfe\x59\x74\x9c\xe6\xa8\x21\xaa\x79\x2d\x08\xcd\x11\xe3\x4c\xff\xc0\x38\x55\x39\xe2\x70\xe8\xd1\x12\xfe\xee\x40\xe9\x7e\xa9\xec\xef\xc6\x1a\xa4\x76\xd9\x49\x78\x4b\x94\x3a\x08\x69\xd6\x8d\x38\xfc\x48\x34\xc9\x91\x12\x3b\xd0\x0d\xe3\xdb\xdf\xa5\xe0\xdb\xf5\x6c\x86\x22\x30\x2a\x10\xef\xda\xd6\xee\x84\x17\x44\x05\x8a\x42\x70\x41\x38\xcf\x6b\xbb\x56\x3d\xf2\x32\x4d\x2e\x6a\x21\x77\x9b\xc0\x40\x92\xe1\x9a\x71\x9a\x26\x1a\x3e\x6a\x22\x81\x24\x19\xbe\x27\x6d\x9a\x0d\x67\xa7\xb7\xf8\x95\xe8\x06\x4b\xc2\xa9\xd8\xa5\x19\xd6\xe2\x4e\x4b\xc6\xb7\xe9\x37\xdf\x65\x58\x75\xa5\x72\xab\xeb\x2c\xf2\xfc\x92\x95\x25\x48\xa6\x9a\xef\x7f\xba\xc3\xc0\xab\x54\x8d\x19\x0a\xec\xfb\x63\x97\x98\x7c\x20\x1f\xd3\x84\xec\xd9\x95\x0b\x36\xc9\x7d\x6c\xc8\x16\x64\x35\xac\x7a\x1f\x2b\xff\xeb\x3f\x3f\xe4\x01\xfa\xb7\x4f\x7b\x58\xa1\xf9\x07\x25\xf8\xbc\xff\xae\x34\xd1\x9d\xda\x08\x0a\xa1\xad\xeb\xc5\x72\x15\x15\x6d\xd8\xbb\x59\x2c\x56\x51\x9d\xc6\xcd\x6f\x1f\xdb\xbc\x59\xdc\xac\x8e\xab\xe4\xfe\x24\xe8\x4e\xf2\xa9\xcf\x34\x04\xf4\x01\xfe\xc9\xe8\x0a\x25\xb5\x10\x25\x91\x49\xb0\xff\xe0\x73\x66\xff\x9f\x85\xbf\xfd\x8e\x77\x51\x93\x56\x81\xf9\xf2\x60\x49\x14\xf2\xfa\x14\x89\xfc\x29\x43\x19\x2e\x74\x6d\x60\x49\x86\x0d\x63\x1d\x35\x9c\x95\xbe\x1f\xce\xd1\xd0\xec\xbb\x5b\x98\xff\x50\x81\x0e\x8c\x53\x71\xc0\xad\xa8\x88\x01\xe3\x11\xc0\x6a\x94\x9a\x15\x6e\x81\x6f\x75\x83\x8a\xa2\x40\x8b\x31\x59\xee\x3e\x0e\xea\xe2\x33\x57\xdb\x13\x0e\xed\x9b\xbe\xff\x92\x0c\x37\x8c\x42\xcf\xdd\x01\xe0\x76\xdf\xdd\xbe\x3e\x01\x08\x82\x8b\xb7\x86\x7a\x1e\x4c\x3d\x23\x40\x90\x1f\xeb\xe3\x16\x08\x75\x7e\xde\x4a\x38\x91\xa9\x89\x32\x3c\x96\xae\x1c\x31\x9a\xa3\x3d\x91\x5a\x7d\x65\xe6\x3c\x80\x42\x25\x28\xbc\xbb\xfd\x65\x23\x76\x7b\xc1\x81\x6b\x9b\x4f\x7f\x5f\x6b\x10\x15\x16\x8c\xd5\xbe\x65\x3a\x4d\xbe\x24\xd9\x98\x7b\x0b\x08\x93\x7f\x3d\x26\xdf\x7b\xb0\x90\x3f\x16\xef\x7b\xc6\x1d\x89\x83\x03\x2c\xdf\x87\x65\x62\x74\xf0\x3a\xe8\xc3\x32\x4a\xa2\xeb\xf7\xb9\xe9\xf7\x2d\xe8\xab\x39\x7a\x61\x93\xf0\xf9\x5f\x35\xb1\x6d\xb7\x89\x6c\x07\xfd\x6d\xda\xd4\xab\xee\x89\x66\x71\xa5\x1a\xa4\xfd\x54\x99\xce\x68\x68\x69\x35\x54\x75\xe5\x8e\xe9\x24\x9f\x48\x74\x48\xb6\x71\x52\x60\x4e\xee\x4b\x22\xff\x5f\x1a\x2d\x1d\x0c\x54\x2d\xab\xfe\x4a\x82\x91\x32\x1c\x76\xe5\xef\x71\x26\x9f\x55\x43\xf8\xd6\x28\x63\xdf\x84\xc7\xcc\x94\x70\x0f\xa4\x8d\x2e\xd9\xfb\x98\x30\x32\x08\x7f\xf0\x7d\x2a\xfc\x91\x7e\x12\x6a\x54\x4c\xd7\x3d\xaf\x2e\x92\x6c\x60\xc9\x69\xf5\x99\xe8\x5d\xe8\xc7\xd4\xed\x78\x8e\xbd\xb2\x7d\xd1\xc9\x36\x1c\x2b\xaf\x3c\xed\x89\x26\x78\xd0\xc8\x91\xcf\x11\x39\xff\x57\xb8\x09\x3a\x92\x7a\x62\x25\x58\xbc\x40\xf3\x2f\x86\x81\x53\x03\x21\xa5\x3b\xd9\xa2\x02\xa5\x8f\xc4\x9e\x19\x2b\x17\xde\x8a\x37\xbc\x7e\xa6\x6a\xc5\x8a\xf2\xa4\xb4\x8d\x92\x73\x06\xe0\x06\x3d\xe3\xfb\x4e\xfb\x29\xdf\xc9\xf6\xeb\x0f\xd4\xa2\xea\xd4\x33\x1c\x28\x68\xa1\xd2\x91\x60\x9e\x79\xd6\x0c\xc4\xf0\xcd\xf9\x34\x27\xa2\x17\x46\x40\x83\x67\x73\x20\x7e\xa0\x50\x78\xe2\x81\xf2\x5f\x18\x40\xcf\xe3\xc9\x08\x8a\x88\x72\x7e\x8e\x9d\x7b\x19\xaa\x58\x30\xa6\xef\x9e\x27\x1e\x13\x47\x31\xc5\x83\xf2\x32\x7e\x93\x07\x82\x1c\x5d\xba\x17\x3e\x7f\x3c\x5b\xcf\x66\x0f\x19\xae\x48\xdb\xa6\xba\x61\x2a\x5b\xcf\xfe\x09\x00\x00\xff\xff\x60\x09\xa4\xa7\x04\x0c\x00\x00")

func frontendApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationJs,
		"frontend/application.js",
	)
}

func frontendApplicationJs() (*asset, error) {
	bytes, err := frontendApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.js", size: 3076, mode: os.FileMode(436), modTime: time.Unix(1503150491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendIndexHTML = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x59\x57\xdb\xb8\x17\x7f\xa6\x9f\xe2\x8e\x79\x98\x99\x0e\x8e\xb3\x14\x28\xd4\xc9\x39\x05\x32\x94\x16\x48\x81\x14\x0a\x73\xe6\x41\xb6\xaf\x6d\x05\x59\x32\x92\x9c\x10\x7a\xf8\xee\xff\x23\x2f\x21\x5b\x69\xa6\xcb\xc3\x1f\x0e\x89\x25\x5f\xdd\xab\xdf\xef\x2e\x5a\x70\x7f\x3b\xe8\xed\xf7\xaf\x3f\x76\x21\xd6\x09\xeb\xbc\x70\xcd\x17\x30\xc2\xa3\xb6\x85\xdc\xea\xbc\x00\x70\x63\x24\x81\x79\x00\x70\x13\xd4\x04\xfc\x98\x48\x85\xba\x6d\x65\x3a\xb4\x5f\x5b\xd3\xaf\x62\xad\x53\x1b\xef\x32\x3a\x6c\x5b\x9f\xed\x4f\x6f\xed\x7d\x91\xa4\x44\x53\x8f\xa1\x05\xbe\xe0\x1a\xb9\x6e\x5b\x47\xdd\x36\x06\x11\xce\x8c\xe4\x24\xc1\xb6\x35\xa4\x38\x4a\x85\xd4\x53\xc2\x23\x1a\xe8\xb8\x1d\xe0\x90\xfa\x68\xe7\x8d\x0d\xa0\x9c\x6a\x4a\x98\xad\x7c\xc2\xb0\xdd\xa8\x14\xfd\x66\xdb\xd0\x8f\x11\x88\x27\x86\x08\x2d\xc8\x15\x6b\x12\x29\x78\x99\x64\x4a\xbf\x04\x5f\x24\x08\x21\x95\x4a\x03\xe5\xa0\x63\x04\x83\xed\x0d\x10\x3e\x06\xa1\x63\x94\x79\xbb\xb2\x0d\x66\x50\x31\xe6\x25\x09\x35\xca\x97\x66\x88\xc2\x42\xa5\x6d\x97\x56\x35\xd5\x0c\x3b\xbd\xfe\x05\xd8\xd0\xe3\x08\x7d\x9a\x20\x5c\xa0\x2f\x51\x2b\xd7\x29\xde\xbe\x78\x9a\xe0\x9e\x10\x5a\x69\x49\xd2\x5c\xc3\xda\x9a\xcb\x28\xbf\x05\x89\xac\x6d\x29\x3d\x66\xa8\x62\x44\x6d\x41\x2c\x31\x6c\x5b\x86\x4f\xb5\xeb\x38\x7e\xc0\x07\xaa\xe6\x33\x91\x05\x21\x23\x12\x6b\xbe\x48\x1c\x32\x20\xf7\x0e\xa3\x9e\x72\x3c\xa3\x73\x44\xb4\x1f\x3b\xad\x5a\xab\xb6\xed\x84\x8c\x68\x36\x2e\xfa\x8d\xad\x5a\x42\x79\xcd\x57\xca\xca\xe7\x51\xfc\x50\xae\x31\x92\x54\x8f\xdb\x96\x8a\x49\x73\x73\xcb\x96\x8d\x2b\x3a\xb8\x72\x2e\x4e\x4f\xa2\xde\xe8\x76\xf3\xf8\xe0\x76\xfb\xec\xfc\x9d\xdc\x12\x97\xd7\xd7\xde\xf5\xd5\xc9\xc8\x69\xdc\xf6\x3e\x87\xd7\xef\xc3\xa8\x6d\x81\x2f\x85\x52\x42\xd2\x88\xf2\xb6\x45\xb8\xe0\xe3\x44\x64\xca\x02\xa7\xe4\xe5\x27\xe0\x0a\x05\xd7\x36\x19\xa1\x12\x09\x3a\xaf\x6a\xdb\xb5\xba\xe3\xab\xd9\xee\xd5\x90\xe1\x8d\x94\xef\xfd\xd1\x81\xef\xb4\xb2\x83\x58\x05\x7a\xab\xa1\x8e\x9b\xa2\xb7\x77\xdd\xda\x6a\xde\x9d\xb4\x98\xe0\x8d\x68\xdc\xbd\xbf\x3d\xae\x3f\x8f\xec\xc9\x8f\xef\xfa\x27\xc7\x9b\xa0\x62\x9a\x00\xe1\x01\x9c\xa3\x4a\x05\x0f\x6a\x03\x05\xa1\x90\x70\xd4\x7d\x0d\x2a\x4b\x4d\x2c\x83\x08\x4b\x61\x64\x98\x20\xd7\x2a\x1f\x90\x60\x40\x09\xdc\x65\x28\x29\x4e\x45\x93\x51\x7d\xf5\xf6\xfc\xf4\xe8\xf4\x70\x77\x5a\x69\x20\x50\xf1\xdf\x35\x8c\x84\xbc\x05\x1a\xc2\x58\x64\x60\xb2\x25\x8f\xe2\x94\x44\x08\x43\x4a\x20\xa4\x0c\x77\x1d\x67\x46\xdd\x3f\x34\x04\xa6\xe1\xa8\x0b\x3b\xff\x76\x4a\x96\x5c\xe5\x4b\x9a\x6a\x50\xd2\x5f\xd9\x19\xa6\x32\x6c\xaa\x98\x0e\x9d\x56\x6d\xbb\xd6\x7a\x6a\xe7\x2e\x18\xcc\x78\x60\xb9\x17\x5a\xef\xc7\xce\xa1\x77\x71\x2c\xa3\xba\xd8\x19\x6f\xde\x6c\xf2\x46\x36\xaa\xdf\xdd\xdf\x74\xf7\xdf\x6d\xef\x6f\xf5\xce\xd2\xcb\xbd\xe8\xf4\xef\x6b\x52\x7f\x26\xbe\x3a\xae\x53\x4c\xfe\x47\xb0\xc8\x09\xb1\x4e\xa3\xf6\xaa\xd6\x9c\x74\xac\x0a\x25\xda\xa2\x6f\xc3\xe1\x4d\xfa\x17\x3f\x38\x6b\xf6\x83\xfe\xb9\x73\x79\xf9\xe1\x7d\xd8\xf2\x0e\xa5\x78\x95\x79\x9b\xe1\xf0\xea\xe2\xea\xf2\x9c\x36\x4f\xbb\x2b\x43\x71\x7f\xfb\x07\x79\x40\xc3\x7f\x8d\xf7\x8a\x9e\x3c\x73\x2a\xa0\xeb\x26\xde\x75\x4c\x79\x34\x92\x82\x47\x1b\xb0\xce\x85\x0e\x45\xc6\x83\x0d\x58\x4f\x09\x47\x76\x8e\x24\x28\x2a\x4f\xd5\x53\xb4\x3e\x9d\x1f\x2f\x8a\x7c\x94\x08\x5f\x26\x40\x03\xaa\x52\x46\xc6\xbb\xc0\x05\xc7\x37\x65\xf7\x63\xf9\x5d\x0b\x85\xd0\x28\xa7\xc4\xf3\x14\x54\xf4\x01\x77\xa1\x5e\xdb\xc1\xe4\xcd\xe4\x8d\xc6\x7b\x6d\x13\x46\x23\xbe\x0b\x3e\x72\x8d\xf2\xe9\x9d\x2f\x98\x90\xbb\xb0\xde\x0c\xcd\xef\xac\x15\xd7\x99\x80\x75\x9d\x6a\xc9\x71\x3d\x11\x8c\xf3\x2a\xc9\xc9\x10\x7c\x46\x94\x6a\x5b\x9c\x0c\x3d\x22\xa1\xf8\xb2\x03\x0c\x49\xc6\xb4\x65\xa4\xd6\xdc\x80\x4e\xc4\x4c\x15\x27\x94\xa3\xb4\x43\x96\xd1\xa0\x10\x58\x2b\x6a\xb0\x34\x19\x68\xfe\xb4\x88\x22\x86\x10\xa1\x86\x48\x8a\x2c\xc5\x20\x4f\x5f\x0f\xb5\xc1\x9b\x08\x8f\x32\xac\xb8\x29\x0b\xf6\xac\x95\x72\x16\x66\xc2\x28\x4b\x1b\x6b\xae\x97\x69\x2d\x38\xe8\x71\x8a\x6d\xab\x68\x58\x73\x23\x4a\xcb\xbe\x60\x8c\xa4\x0a\x03\x0b\x02\xa2\x49\xd9\x6d\x66\x5f\xf4\x57\xdd\x44\x46\x66\xc9\x5d\xf7\x94\x8d\xf7\x24\x49\x19\xda\xa5\xa2\x4a\xd2\x6e\x58\x40\x24\x25\x36\xde\xa7\x84\x07\x18\xb4\xad\x90\x30\x85\xd5\xa4\xd6\x5c\x95\x12\x5e\xcd\x42\x49\x5b\x70\x36\xb6\x3a\xfd\x62\x1e\x9c\x0c\x69\x44\x34\x15\xdc\x75\x8c\xdc\xd2\x41\xd4\x17\xdc\xf6\x88\xcc\x23\xf7\x57\x08\xb9\x4e\x41\x56\xd5\x24\x73\xa4\x79\xc6\x71\xd5\x22\xb2\x6e\x7d\x75\xd5\x25\xa5\xa3\x9c\x80\x0e\x3b\x2f\x9e\x1c\xbf\x2f\x18\x43\x5f\xe7\x45\xd3\x44\x94\x59\xa3\xd4\x86\x71\x79\xa2\x36\xf2\x80\x28\xb6\x01\xd5\x0e\xc0\xc4\x42\xee\x11\xca\xa3\xa5\xee\xaf\xc8\x87\x39\x67\x58\x40\x83\xb6\xf5\xac\xb3\x2a\x8c\x19\x9b\x02\x59\xe9\x99\x7a\x94\x34\x8a\xf5\x93\x13\x19\xed\xb8\x64\xc2\x40\x6e\x86\xe3\xa8\x40\x6e\x75\x5c\x5a\x29\x0b\x09\x84\xc4\x4e\x59\x51\x67\x68\x07\xbe\x7c\xe9\x83\xe5\x69\x6e\x73\x1c\xd9\xaa\x90\x7f\x7c\x34\x5c\xb9\x0e\xa3\x13\x07\x64\x6c\x9a\xbb\x9c\x35\xa7\x36\x37\xfb\x8a\x8a\x19\x99\xb9\x7c\xab\xb6\x37\x0e\x27\xc3\x0e\x94\xf5\x6c\x59\x7a\x5a\x93\x42\x3e\xf5\x56\x8a\xd1\xa4\x7f\x7e\x1c\xb3\x93\xc0\x7e\x0d\xe5\x43\x9a\xa9\xd8\x6e\x4e\x09\xcf\x8a\x13\x86\x52\x43\xfe\x69\x07\x84\x47\x28\x2d\x90\xc2\x64\x58\xde\x57\x12\x58\xd6\xd1\x19\x2d\x00\xf3\x64\xde\x65\xa8\x4c\x86\xd8\x3e\x95\xbe\xd9\xd1\xe6\xe9\x16\xd3\x20\x40\xde\xb6\xb4\xcc\xb0\xa0\x7a\x46\x49\x4e\x7b\x61\xbf\x20\xdd\xe6\x42\xdb\x85\xb9\xc7\xc7\xe9\x59\x17\xc1\xfa\x03\x30\x66\xd7\x87\x5f\x0d\xa6\x32\x66\x8f\x90\x6b\xbb\x30\xf9\x1c\xa0\x99\x66\x95\x99\xdf\xe1\xf9\x86\x71\xf6\x57\x68\xca\x97\x38\xc8\x3f\xed\x54\xd2\x84\xc8\x71\x41\x4d\xde\x75\xfa\x94\x27\xb3\xd4\xcc\x6b\xc8\xcb\x39\x5d\xa0\xd0\x9c\x85\x5a\xb3\x82\xf9\xf6\xde\xea\xe4\xbc\xe4\xcf\xf3\xd9\x15\xb7\xe6\x6c\xcd\x7b\x79\x99\x79\xb3\xea\x2d\xda\x36\x55\x2a\x07\x63\x1e\xf6\x25\x12\x8d\x4b\xe1\xcc\xeb\x34\xe2\x76\xbe\xba\x2d\x11\x34\x1b\x75\xe2\x21\x33\xa5\xae\x6d\x95\x13\x2f\xf0\xe4\xfd\x55\xd0\x9a\x55\x28\x07\x94\xf7\x2e\xd5\x63\x56\x7e\x22\x91\xcc\xd8\x35\x69\x2e\x05\x33\xd1\x3a\x52\x6d\x6b\xb3\x8c\xd4\xaa\x5c\x39\xd5\xa0\x25\x10\x16\x99\xca\xbb\x29\x4f\x33\x5d\xd9\xf0\x34\x07\x53\xd3\x54\xe6\xfb\xa8\x94\x55\x2e\xb9\x2a\xf3\x12\xaa\x2d\x18\x12\x96\x61\xdb\x9a\x94\x3e\x3f\x67\xed\xc9\x3f\x8b\x24\x3b\x66\xd6\xdf\x70\xd9\x6c\xf0\x2e\x75\x61\x19\x83\x93\x69\x4d\x62\x70\xb2\x21\xfb\x95\x31\x58\xfa\xac\x40\x1b\xfc\xec\x38\x4c\x17\x9d\x52\xd8\x36\x3b\xbf\x54\xa2\x9d\x49\x36\x5b\x09\x0a\x83\x0b\xe3\x56\x0e\xd2\xd2\xe7\x85\x6f\x8d\x19\xeb\x2b\x31\x86\x24\x30\xbb\x9a\x45\xaf\x2e\x09\xa5\xe7\x71\x78\x99\xe4\x76\x4c\xb9\x5e\x01\xc9\x0f\x04\xc8\x62\x91\x9a\xd9\xa0\xff\xca\x20\x91\xc5\xd0\x5f\x54\xac\xbe\x19\x24\x12\x87\x48\xd8\x73\x14\xaf\xa0\xb2\xda\x68\x7f\xad\x1a\x18\x56\x0b\x43\x17\xd3\x95\xcd\xc8\x94\xf6\xa7\xd0\x57\x5b\xcf\x25\x53\x79\x96\x94\x9f\xe3\xed\xff\x5f\x57\xaf\x9c\xc5\x2b\x2e\x10\x93\x2c\xfe\xfa\xea\xb0\x48\x39\x7c\x33\xe8\x4c\xa4\xe5\x69\x8d\xc1\xcf\xc8\xe9\xa2\x0d\x93\xcd\x6f\xb9\x37\x99\x5c\xbd\xcc\x4b\x48\x31\x82\xc9\xc1\xfe\x3f\x6f\x79\xa0\x38\x81\xcf\xb0\x3a\x95\x4f\x62\x84\x12\x03\xdb\x1b\x5b\x8f\x8f\x30\x39\x1e\x54\x97\x21\x11\xd5\x71\xe6\xe5\x57\x20\xc7\xd9\x03\x0d\x51\x3a\x42\xab\xc5\xc3\x42\x21\x57\x1e\x17\x2a\xc9\x5e\xff\xc2\x9c\x11\xe0\xcb\x97\xda\x10\xa5\xa2\x82\x4f\x91\xb7\x6c\x4f\x37\x4f\x56\x8e\x7f\x70\x96\xa1\x1c\xc3\x1f\x1c\x4d\x62\x12\x39\xce\x8f\x56\x93\xbb\xd0\xdf\x15\xbc\x27\x43\x72\x51\xdc\xe4\xa4\x2c\x8b\x28\x57\x7f\x3e\x5d\x63\x7d\xc7\x15\xcf\xe0\xce\x58\x74\x1a\xb5\x46\xb3\xf6\xaa\x6c\x2d\xbd\xde\x59\xbc\xdc\xb9\x11\xaa\xeb\x9d\x1f\x7b\xa7\x67\x0f\xc7\x29\xff\x70\x74\xdb\x0d\xe4\xc7\xe1\x36\xeb\x8d\x77\xf6\x9b\xdb\xf1\xbb\xb3\xbf\x3e\xa7\xaf\xc9\xab\x93\xfb\xb7\x67\xff\xe1\x72\xc7\xb6\xe1\x88\xfb\x2c\x0b\x10\x08\x63\xe0\x8b\x24\xa5\x0c\x83\x0a\x2d\xfc\xe1\x21\x13\xa3\x3f\x37\x40\x48\xa0\xa5\x20\xe5\x01\x1d\xd2\x20\x23\x2c\xbf\xda\x53\x40\x14\x70\xc4\x00\x83\x1f\xe2\x46\x8f\xa8\xd6\x28\xed\xc9\xfd\x70\x79\x6d\x3c\x50\x73\x57\xc6\xdf\xe6\xea\xd3\xe6\x4d\x17\x3f\x84\x87\xa7\xbd\x01\xa9\xd7\xb7\x4f\x4e\x0e\x5a\xd7\x7b\x47\xf5\xb7\xad\xde\xc5\x4d\xef\xcc\xc3\xc3\xad\x87\x66\xd8\xbc\xae\xc7\xd9\xeb\xd5\xb9\xfa\x0e\x48\x11\xf5\x3c\x94\x54\xc5\x36\x41\xe5\x34\x6a\xf5\x5a\x7d\xb6\x6f\x45\x3c\xef\x76\xf6\x9c\xcf\xe7\x07\x74\x70\x4a\xff\x6e\x91\xe8\x72\xa0\xe9\x43\xe3\xe8\xf8\x92\xb6\x7c\xd5\x0d\x0e\x1f\x76\xae\xf7\xa2\xcd\xfe\xe0\x4a\x64\x27\x2b\xe1\x59\x04\x44\xd2\x94\x51\x3f\xbf\x6a\x31\xf3\x99\xc1\xee\x3a\xc5\x85\x97\xeb\x14\xff\x8e\x79\xf1\xbf\x00\x00\x00\xff\xff\x94\xa8\xac\xe4\xa0\x19\x00\x00")

func frontendIndexHTMLBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHTML,
		"frontend/index.html",
	)
}

func frontendIndexHTML() (*asset, error) {
	bytes, err := frontendIndexHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 6560, mode: os.FileMode(436), modTime: time.Unix(1503150238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendLocaleDeDeAllJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xb1\x6e\x1b\x4b\x0c\xec\xfd\x15\xb4\x6a\x9d\x9f\xf1\x02\xa4\x50\xaa\x18\x36\x82\x00\x46\x8a\x18\x6e\x82\x34\x7b\xb7\xa3\xdb\x85\x56\x3c\x81\xe4\xfa\x12\x07\xfe\x1b\x7f\x83\xab\x74\xfa\xb1\x60\x4f\x52\x72\x32\x4e\x49\xb7\xc0\x62\x86\x33\xe4\x90\x3f\xce\x88\x66\x2e\x41\xac\x52\x34\x02\xab\xb8\xb3\x6a\xd9\x65\xf6\xb3\x05\x95\x5f\xa2\x59\x67\x01\x32\x5b\xd0\xec\xda\x29\x45\x35\xe2\xd8\x04\x23\xef\x94\xee\x06\xd0\x9c\x7a\xa7\xe4\x33\x69\x6e\x82\xda\xd7\x7c\x79\xf9\xff\xdb\x80\x94\xe2\xe6\xdd\xec\x8c\xe8\x69\x3e\x2a\xd3\xad\x61\x21\x72\x5b\xf5\x60\xab\x7a\xe9\xb8\x9d\x28\xf5\x51\x5a\xb0\x2f\xb4\x6d\xe4\x96\xb4\x09\x11\xcb\x0b\xba\x61\xd3\x26\xe4\xe4\x63\x9b\xb9\x3d\x51\xa8\x36\xae\x1a\x81\x33\xec\x4d\x4d\xf0\xef\x84\x13\x44\x0d\x29\x81\xcf\x8f\xe1\x8c\xfe\x34\xf6\x13\x32\x0e\xd6\x8f\x61\x82\x07\xb8\x74\x1a\xf9\x05\xb1\xa5\x75\x94\x51\xef\x46\x85\x93\xab\x71\x00\x57\xde\x99\x9b\xea\x0b\x07\x97\x8c\xfc\x6f\x01\xba\xf8\x43\x60\xf8\x66\x55\x9d\x85\xab\x10\x79\xaa\xfe\x55\x34\x03\x49\x5e\x82\x7c\x04\xdd\x7f\xbe\xdd\xcf\x52\x91\x6a\x35\x72\x79\x39\x27\xef\x46\xf2\xc8\x3b\x9f\xa5\x09\xf4\x58\x5a\xb5\x7d\x11\xa3\x7e\xfb\x53\x3c\x2e\xe8\x43\xac\x49\x23\x08\x91\x97\xae\x09\xd4\x23\x1a\xe4\xfc\x95\x9c\xa2\x64\xd0\x84\xa9\x44\x95\x09\xbe\x69\xd4\x4a\x0a\x86\x37\xde\x37\xc1\x32\xb7\x8b\xdd\xcf\x7f\xe3\x2f\xba\xce\xb4\x72\xcc\xba\xcb\x1e\x67\x29\xb5\xd7\x2e\x91\x63\x45\x00\x9f\xd3\x5d\x57\xbb\xe4\x4b\x14\x8b\xbf\xbb\xa2\x88\x18\x99\xd2\xf6\xd9\xab\xcd\x87\xf4\x8e\xcc\x3d\x40\xb4\x09\x7d\x66\x0f\x9e\x93\x4b\xda\x51\x0d\x55\x08\xf9\x28\x58\x19\xad\xba\x4d\x84\x80\x29\xb3\x27\x8d\x4d\x80\x90\xab\x75\x83\xe1\xc9\x27\x02\x38\x18\xdf\x74\x3d\x04\xbe\xaa\xbf\x4f\xf8\xbe\xdd\x3e\xe7\xa5\xd1\x3a\xda\x6b\x94\xe0\x90\xa2\x13\x33\xbc\x5f\x8f\x1d\x38\x7e\xcc\x8f\x88\x2d\x98\x56\x29\x36\xab\x61\xb0\x0a\xa6\xab\x6c\xd6\x31\xb9\xba\x98\x01\xaf\xc8\x8b\xe3\x32\x5c\xd5\x31\xfe\xa8\x89\x2d\x0a\x95\x0d\x66\xbd\xab\x11\xa9\x45\xda\xbe\x68\x49\x48\x1f\xc5\x5f\x4c\x88\xcd\x92\xa6\x2e\x05\x22\x1f\x4a\xf4\x59\x3c\x06\xf6\x84\x3d\x79\x66\x83\xd0\xb2\x4b\x65\xc9\x21\x43\x10\x5b\x1c\xda\x6a\xe3\x48\x47\x4b\xf8\xfb\x3a\xde\xec\x77\xb8\xf8\x28\xc3\x9e\xd8\xcd\x1d\x8b\xc0\xf9\x72\x78\xfe\x75\x14\x5c\xd6\x54\x7a\x78\x6a\xba\x03\xd9\x7e\x4d\x77\x77\x66\x2a\xda\xc7\x17\x66\xbf\xe7\x67\x4f\xbf\x02\x00\x00\xff\xff\xec\xbf\x58\x0f\x72\x05\x00\x00")

func frontendLocaleDeDeAllJSONBytes() ([]byte, error) {
	return bindataRead(
		_frontendLocaleDeDeAllJSON,
		"frontend/locale/de-de.all.json",
	)
}

func frontendLocaleDeDeAllJSON() (*asset, error) {
	bytes, err := frontendLocaleDeDeAllJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/locale/de-de.all.json", size: 1394, mode: os.FileMode(436), modTime: time.Unix(1503150491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendLocaleDeDeUntranSLAtedJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x05\x04\x00\x00\xff\xff\x43\xbf\xa6\xa3\x02\x00\x00\x00")

func frontendLocaleDeDeUntranSLAtedJSONBytes() ([]byte, error) {
	return bindataRead(
		_frontendLocaleDeDeUntranSLAtedJSON,
		"frontend/locale/de-de.untranslated.json",
	)
}

func frontendLocaleDeDeUntranSLAtedJSON() (*asset, error) {
	bytes, err := frontendLocaleDeDeUntranSLAtedJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/locale/de-de.untranslated.json", size: 2, mode: os.FileMode(436), modTime: time.Unix(1503150491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendLocaleEnUsAllJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\xdc\x3c\x10\xbe\xe7\x57\x3c\xd9\x4b\x2e\xaf\xf3\x86\x16\x7a\xd8\x9e\x42\x4f\x2d\xa1\x94\x7c\x1c\x02\xbd\xc8\xf6\xc4\x16\x91\x35\x8b\x34\x8a\x6a\x4a\xfe\x7b\x19\xcb\x9b\x3a\x8b\xdd\xcb\xee\xc2\xcc\xa3\x79\x3e\x66\xf6\xf7\x19\xb0\x33\x8e\x82\x54\x91\x9a\x40\x52\x79\x96\xea\x89\x93\x6f\x77\x7b\x68\x15\xd8\xb1\xf4\x14\x76\x7b\xec\xee\x7b\x1b\x61\x23\x3c\x0b\xa4\x27\x14\x08\x46\x4e\x30\x81\xe0\x98\x9f\xad\xef\xf0\xc4\xe1\x67\xba\xba\xfa\xf0\xa9\x27\xe7\xec\xe1\xf3\xee\x0c\x78\xfd\x6f\x31\x89\x07\x92\xde\xfa\xae\xca\xe4\xa5\xca\x81\x7d\xb7\x32\xed\xee\xd8\x06\x6d\xc3\xd4\x76\x89\xaf\x17\x03\x5e\x28\x8c\x88\x1c\xc2\x08\x53\x73\x52\x32\x36\x6e\x8c\xac\xc5\x57\x4d\x20\x23\x34\x2b\x5c\x99\xf4\x65\xaa\x2f\x24\x9d\xbf\xc7\x7b\xca\xdb\xe0\xef\x94\x71\x57\x8a\xef\x40\x81\x5e\xc8\xb8\x6d\xdc\x5d\xcf\x19\xc3\xc6\x54\x67\x6a\x3a\x62\xab\xd6\x88\x59\x7b\xa0\xb8\xaf\xd5\xfd\x5f\xa4\xd0\x2f\xa9\xea\x14\x7c\xd5\x5b\xbf\x36\xf7\x87\x23\x13\x09\x81\x06\x1a\x6a\x0a\x25\x4c\x46\xc7\xfa\xa9\x46\xe2\xe1\xf6\x46\x33\x0d\x91\xdc\x13\x4c\x84\xf4\x46\x90\x39\xb9\x16\x2d\x45\x09\x3c\x2e\x48\x5f\xe2\x5b\x8a\x82\x83\x89\x11\x76\x7a\x49\xe3\x65\x4f\x20\x17\xe9\xfc\x84\x98\x72\x9a\xd8\xd1\xda\x7e\x69\x84\x1f\x1b\x9d\xe0\xbb\xe9\x37\x5d\x8b\x90\x17\xcb\x7e\x5f\x6a\xff\x2f\x8b\x78\xe4\x74\x11\x08\xec\xdd\x88\x48\xa4\xab\x32\x09\x60\xdf\xd0\x25\xae\x23\x22\xb3\x57\x05\xba\xa1\x81\x1c\x9b\x76\x62\x7e\x30\xdd\xd2\x77\x64\xeb\x1c\x6a\x42\xa7\xb4\x23\x63\x30\x63\x4d\x68\xf8\x30\xaa\x24\xcf\x79\x63\xb7\x26\x49\x07\xce\x14\xa8\xad\xea\x71\xcd\xec\x52\x44\x3d\x9e\xa2\x02\x1d\x37\x64\x23\xa7\x7b\x46\x69\x58\x32\x6d\x9c\x6d\x9e\x8b\xc8\x3a\x89\xb0\xd7\x2f\xa5\x6e\xb2\x5e\x60\xcb\xea\x41\xe4\xa2\x68\x2d\xac\x47\x4e\x68\x8c\x2f\x9e\xbd\x58\xca\xaa\x50\xfd\x3a\x4d\x4a\x09\xa6\xe0\x56\x88\x3d\x72\x0a\x6f\xce\x99\x88\x72\x5d\x2d\x8c\x6f\x11\x85\x55\x6e\x8a\x6f\x59\x3c\xdc\xde\x2c\xb7\xd3\x8a\xa3\x7f\xdf\xd3\x7c\x8c\x06\x9e\xf2\x3c\xe6\x14\x1f\xc8\xb4\xfa\xf7\xb1\xf9\xc6\x6d\x69\x98\xb6\x78\x7e\x63\x2b\xc2\xe9\xc1\xf9\xd0\x66\x25\xdb\xb7\x36\x37\x14\xaf\xce\x5e\xff\x04\x00\x00\xff\xff\xc2\x00\x37\x39\x3e\x05\x00\x00")

func frontendLocaleEnUsAllJSONBytes() ([]byte, error) {
	return bindataRead(
		_frontendLocaleEnUsAllJSON,
		"frontend/locale/en-us.all.json",
	)
}

func frontendLocaleEnUsAllJSON() (*asset, error) {
	bytes, err := frontendLocaleEnUsAllJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/locale/en-us.all.json", size: 1342, mode: os.FileMode(436), modTime: time.Unix(1503150491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendLocaleEnUsUntranSLAtedJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x05\x04\x00\x00\xff\xff\x43\xbf\xa6\xa3\x02\x00\x00\x00")

func frontendLocaleEnUsUntranSLAtedJSONBytes() ([]byte, error) {
	return bindataRead(
		_frontendLocaleEnUsUntranSLAtedJSON,
		"frontend/locale/en-us.untranslated.json",
	)
}

func frontendLocaleEnUsUntranSLAtedJSON() (*asset, error) {
	bytes, err := frontendLocaleEnUsUntranSLAtedJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/locale/en-us.untranslated.json", size: 2, mode: os.FileMode(436), modTime: time.Unix(1503150491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/application.coffee": frontendApplicationCoffee,
	"frontend/application.js": frontendApplicationJs,
	"frontend/index.html": frontendIndexHTML,
	"frontend/locale/de-de.all.json": frontendLocaleDeDeAllJSON,
	"frontend/locale/de-de.untranslated.json": frontendLocaleDeDeUntranSLAtedJSON,
	"frontend/locale/en-us.all.json": frontendLocaleEnUsAllJSON,
	"frontend/locale/en-us.untranslated.json": frontendLocaleEnUsUntranSLAtedJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": {nil, map[string]*bintree{
		"application.coffee": {frontendApplicationCoffee, map[string]*bintree{}},
		"application.js": {frontendApplicationJs, map[string]*bintree{}},
		"index.html": {frontendIndexHTML, map[string]*bintree{}},
		"locale": {nil, map[string]*bintree{
			"de-de.all.json": {frontendLocaleDeDeAllJSON, map[string]*bintree{}},
			"de-de.untranslated.json": {frontendLocaleDeDeUntranSLAtedJSON, map[string]*bintree{}},
			"en-us.all.json": {frontendLocaleEnUsAllJSON, map[string]*bintree{}},
			"en-us.untranslated.json": {frontendLocaleEnUsUntranSLAtedJSON, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
